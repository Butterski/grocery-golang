/*
 * Grocery List Management API
 *
 * A simple REST API for managing a grocery shopping list, designed for student term projects.
 *
 * API version: 1.0.0
 * Contact: support@example.edu
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
	// Protected specifies whether this route requires authentication
	Protected bool
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	// Get the JWT middleware
	jwtAuth := JWTAuthMiddleware()

	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}

		// Register the route with the appropriate HTTP method
		switch route.Method {
		case http.MethodGet:
			if route.Protected {
				router.GET(route.Pattern, jwtAuth, route.HandlerFunc)
			} else {
				router.GET(route.Pattern, route.HandlerFunc)
			}
		case http.MethodPost:
			if route.Protected {
				router.POST(route.Pattern, jwtAuth, route.HandlerFunc)
			} else {
				router.POST(route.Pattern, route.HandlerFunc)
			}
		case http.MethodPut:
			if route.Protected {
				router.PUT(route.Pattern, jwtAuth, route.HandlerFunc)
			} else {
				router.PUT(route.Pattern, route.HandlerFunc)
			}
		case http.MethodPatch:
			if route.Protected {
				router.PATCH(route.Pattern, jwtAuth, route.HandlerFunc)
			} else {
				router.PATCH(route.Pattern, route.HandlerFunc)
			}
		case http.MethodDelete:
			if route.Protected {
				router.DELETE(route.Pattern, jwtAuth, route.HandlerFunc)
			} else {
				router.DELETE(route.Pattern, route.HandlerFunc)
			}
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {
	// Routes for the GroceryItemsAPI part of the API
	GroceryItemsAPI GroceryItemsAPI

	// Routes for the AuthAPI part of the API
	AuthAPI AuthAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
		{
			"AddItem",
			http.MethodPost,
			"/items",
			handleFunctions.GroceryItemsAPI.AddItem,
			true, // Protected route
		},
		{
			"DeleteItem",
			http.MethodDelete,
			"/items/:itemId",
			handleFunctions.GroceryItemsAPI.DeleteItem,
			true, // Protected route
		},
		{
			"GetItemById",
			http.MethodGet,
			"/items/:itemId",
			handleFunctions.GroceryItemsAPI.GetItemById,
			true, // Protected route
		},
		{
			"ListItems",
			http.MethodGet,
			"/items",
			handleFunctions.GroceryItemsAPI.ListItems,
			true, // Protected route
		},
		{
			"UpdateItem",
			http.MethodPut,
			"/items/:itemId",
			handleFunctions.GroceryItemsAPI.UpdateItem,
			true, // Protected route
		},
		{
			"Register",
			http.MethodPost,
			"/register",
			handleFunctions.AuthAPI.Register,
			false, // Public route
		},
		{
			"Login",
			http.MethodPost,
			"/login",
			handleFunctions.AuthAPI.Login,
			false, // Public route
		},
	}
}
